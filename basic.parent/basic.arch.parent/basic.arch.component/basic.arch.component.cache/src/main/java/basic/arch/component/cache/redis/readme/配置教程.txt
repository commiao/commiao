
---------------------------------------config.properties-------------------------
redis.host = 192.168.3.202
redis.port = 6379
#测试环境使用0库
redis.database = 2
redis.pwd = 123qwe123
redis.timeout = 15000
#最大分配的对象数  
redis.pool.maxTotal=1024  
#最大能够保持idel状态的对象数  
redis.pool.maxIdle=200  
#当池内没有返回对象时，最大等待时间  
redis.pool.maxWaitMillis=1000  
#当调用borrow Object方法时，是否进行有效性检查  
redis.pool.testOnBorrow=true  
#当调用return Object方法时，是否进行有效性检查  
redis.pool.testOnReturn=true  

redis.session.namespace=htmall
redis.session.time = 1800


#redis主从复制
redis.master.host=192.168.3.202
redis.master.port=26379

redis.slave1.host=192.168.3.203
redis.slave1.port=26379


redis.slave2.host=192.168.3.204
redis.slave2.port=26379


-----------------------------------切面配置---------------------------------------

		<context:component-scan base-package="basic.arch.component.cache" />           

	<!--切面配置，建议是将切面加在最上层 -->
	<!-- aop config -->
	<aop:config>
		<aop:pointcut id="redisCacheAdvicePoint" expression="execution(* basic.arch.component.cache.service..*.*(..)) and @annotation(enableCache)"  />
		<aop:aspect ref="redisCacheAspect" order="1">
			<aop:around pointcut-ref="redisCacheAdvicePoint" method="doAroundMethod"/> 
		</aop:aspect>
	</aop:config>
	
	<bean id="redisCacheAspect" class="basic.arch.component.cache.aop.CacheAspect" >
		<property name="cacheHandleChain" ref="cacheHandleChain"></property>
	</bean>
	
	<!--枚举类型要想注入到类中，一定要先使用org.springframework.beans.factory.config.FieldRetrievingFactoryBean类将枚举类型进行转换  -->
	<bean id="redisType" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">    
        <property name="staticField" value="basic.arch.component.cache.annotation.CacheType.REDIS" />    
    </bean>  
	
	
	<!-- 缓存处理链 -->
	<bean id="cacheHandleChain" class="basic.arch.component.cache.aop.handle.CacheHandleChain">
		<property name="cacheHandlerMap">
			<map>
				<entry key-ref="redisType" value-ref="redisCacheHandle"></entry>
			</map>
		</property>
	</bean>
	




---------------------------------------spring配置文件-------------------------

<!-- 将session放入redis -->
	<bean id="redisHttpSessionConfiguration"
		class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
		<property name="maxInactiveIntervalInSeconds" value="${redis.session.time}" />
		<property name="redisNamespace" value="${redis.session.namespace}"/>
	</bean>
	
	
	<!--  redis 哨兵-->
	<bean id="redisSentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<property name="master">
			<bean class="org.springframework.data.redis.connection.RedisNode">
				<property name="name" value="mymaster"></property>
			</bean>
		</property>
		<property name="sentinels">
			<set>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.master.host}" />
					<constructor-arg name="port" value="${redis.master.port}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.slave1.host}" />
					<constructor-arg name="port" value="${redis.slave1.port}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.slave2.host}" />
					<constructor-arg name="port" value="${redis.slave2.port}" />
				</bean>
			</set>
		</property>
	</bean>
	



	<!-- redis连接池 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean>
	
	
	<bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		destroy-method="destroy">
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.pwd}" />
		<property name="database" value="${redis.database}" />
		<property name="timeout" value="${redis.timeout}" />
		 <property name="usePool" value="true"/> 
		<constructor-arg name="sentinelConfig" ref="redisSentinelConfiguration"/>
	</bean>
	<!--String模板  Key-Value序列化使用的是StringRedisSerializer 可读 -->
	<bean id="redisStringTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" >
		<property name="connectionFactory" ref="redisConnectionFactory" />
	</bean>
	
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
	<bean id="jdkSerializationRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
	
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
		<property name="connectionFactory" ref ="redisConnectionFactory" />
		<property name="keySerializer" ref ="stringRedisSerializer"></property>
		<property name="valueSerializer" ref ="jdkSerializationRedisSerializer"></property>
	</bean>
	
	
	

---------------------------------------spring配置文件-------------------------


	<!--  redis 哨兵-->
	<bean id="redisSentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
		<property name="master">
			<bean class="org.springframework.data.redis.connection.RedisNode">
				<property name="name" value="mymaster"></property>
			</bean>
		</property>
		<property name="sentinels">
			<set>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.master.host}" />
					<constructor-arg name="port" value="${redis.master.port}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.slave1.host}" />
					<constructor-arg name="port" value="${redis.slave1.port}" />
				</bean>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="${redis.slave2.host}" />
					<constructor-arg name="port" value="${redis.slave2.port}" />
				</bean>
			</set>
		</property>
	</bean>



	<!-- redis连接池 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean>
	
	
	<bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		destroy-method="destroy">
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.pwd}" />
		<property name="database" value="${redis.database}" />
		<property name="timeout" value="${redis.timeout}" />
		 <property name="usePool" value="true"/> 
		<constructor-arg name="sentinelConfig" ref="redisSentinelConfiguration"/>
	</bean>
	<!--String模板  Key-Value序列化使用的是StringRedisSerializer 可读 -->
	<bean id="redisStringTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" >
		<property name="connectionFactory" ref="redisConnectionFactory" />
	</bean>
	
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
	<bean id="jdkSerializationRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
	
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
		<property name="connectionFactory" ref ="redisConnectionFactory" />
		<property name="keySerializer" ref ="stringRedisSerializer"></property>
		<property name="valueSerializer" ref ="jdkSerializationRedisSerializer"></property>
	</bean>