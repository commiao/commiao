
--------------------------------mvn插件-------------------------------
1、maven-compiler-plugin
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.1</version>
    <configuration>
        <source>1.6</source> <!-- 源代码使用的开发版本 -->
        <target>1.6</target> <!-- 需要生成的目标class文件的编译版本 -->
        <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
    
        <!-- 这下面的是可选项 -->
        <meminitial>128m</meminitial>
        <maxmem>512m</maxmem>
        <fork>true</fork> <!-- fork is enable,用于明确表示编译版本配置的可用 --> 
        <compilerVersion>1.3</compilerVersion>
        
        <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
        <compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>
        
    </configuration>
</plugin>

---------------------------------mvn命令--------------------------------------
编译源代码： mvn compile  
编译测试代码：mvn test-compile     
运行测试：mvn test    
产生site：mvn site    
打包：mvn package    
在本地Repository中安装jar：mvn install  
清除产生的项目：mvn clean    
 生成eclipse项目：mvn eclipse:eclipse 清除mvn eclipse:clean  
 生成idea项目：mvn idea:idea  
 组合使用goal命令，如只打包不测试：mvn -Dtest package    
 编译测试的内容：mvn test-compile  
 只打jar包: mvn jar:jar  
只测试而不编译，也不测试编译：mvn test -skipping compile -skipping test-compile  
      ( -skipping 的灵活运用，当然也可以用于其他组合命令)  
mvn dependency:resolve 打印出已解决依赖的列表  